#include <stdio.h>
#include <string.h>
#include <fcntl.h>
#include <errno.h>
#include <termios.h>
#include <unistd.h>
#include <stdint.h>
#include <pthread.h>

class UART {
private:
    int uart_fd;                    // 시리얼 포트 파일 디스크립터
    pthread_t read_thread;          // 읽기 스레드
    unsigned char read_buf[7];      // 읽기 버퍼 (7바이트 고정)
    bool running;                   // 스레드 실행 상태
    
    const char* serial_device;      // 시리얼 장치 경로
    speed_t baudrate;               // 통신 속도

    // CRC16 MODBUS 계산 메소드
    static uint16_t CRC16_MODBUS(const unsigned char* data, int length) {
        uint16_t crc = 0xFFFF;
        
        for (int i = 0; i < length; i++) {
            crc ^= (uint16_t)data[i];
            for (int j = 0; j < 8; j++) {
                if (crc & 0x0001) {
                    crc = (crc >> 1) ^ 0xA001;
                } else {
                    crc = crc >> 1;
                }
            }
        }
        return crc;
    }

    // 읽기 스레드 정적 호출 함수
    static void* readThreadWrapper(void* instance) {
        return ((UART*)instance)->readThreadFunction();
    }

    // 실제 읽기 스레드 함수
    void* readThreadFunction() {
        int num_bytes = -1;
        unsigned char insert_buf;
        printf("Thread started for %s\n", serial_device);

        while (running) {
            while ((num_bytes = read(uart_fd, &insert_buf, 1)) > 0) {
                printf("Data read from %s: %d bytes, Insert byte: %02X\n", serial_device, num_bytes, insert_buf);

                // 버퍼 업데이트 (슬라이딩 윈도우)
                for (int i = 0; i < 6; i++) {
                    read_buf[i] = read_buf[i + 1];
                }
                read_buf[6] = insert_buf;

                // 수신된 데이터가 명령인지 확인하고 출력
                if (parseMotorCommand(read_buf, 7)) {
                    printf("Command detected from %s: ", serial_device);
                    for (int i = 0; i < 7; i++) {
                        printf("%c", read_buf[i]); // ASCII 문자로 출력
                    }
                    printf("\n");
                }
            }
            if (num_bytes < 0) {
                printf("Error reading from %s: %s\n", serial_device, strerror(errno));
                break;
            }
        }
        return NULL;
    }

public:
    // 생성자
    UART(const char* device = "/dev/ttyS0", speed_t baud = B9600) 
        : uart_fd(-1), running(false), serial_device(device), baudrate(baud) {
        memset(read_buf, 0, sizeof(read_buf));
    }

    // 소멸자
    ~UART() {
        close();
    }

    // 시리얼 포트 초기화
    bool init() {
        uart_fd = open(serial_device, O_RDWR | O_NOCTTY);
        if (uart_fd < 0) {
            printf("Error %i from open %s: %s\n", errno, serial_device, strerror(errno));
            return false;
        }

        struct termios tty;
        if (tcgetattr(uart_fd, &tty) != 0) {
            printf("Error %i from tcgetattr %s: %s\n", errno, serial_device, strerror(errno));
            close();
            return false;
        }

        // 포트 설정
        tty.c_cflag &= ~PARENB;       // 패리티 비트 없음
        tty.c_cflag &= ~CSTOPB;       // 1 스톱 비트
        tty.c_cflag &= ~CSIZE;        // 비트 마스크 클리어
        tty.c_cflag |= CS8;           // 8 비트
        tty.c_cflag &= ~CRTSCTS;      // 하드웨어 흐름 제어 없음
        tty.c_cflag |= CREAD | CLOCAL; // 수신 가능 및 모뎀 상태 무시

        tty.c_lflag &= ~ICANON;       // 정규 모드 비활성화
        tty.c_lflag &= ~ECHO;         // 에코 비활성화
        tty.c_lflag &= ~ECHOE;        // 에러 문자 비활성화
        tty.c_lflag &= ~ECHONL;       // 뉴라인 에코 비활성화
        tty.c_lflag &= ~ISIG;         // 인터럽트 신호 비활성화

        tty.c_iflag &= ~(IXON | IXOFF | IXANY); // 소프트웨어 흐름 제어 비활성화
        tty.c_iflag &= ~(IGNBRK | BRKINT | PARMRK | ISTRIP | INLCR | IGNCR | ICRNL);

        tty.c_oflag &= ~OPOST;        // 출력 처리 비활성화
        tty.c_oflag &= ~ONLCR;        // 개행 변환 비활성화

        tty.c_cc[VTIME] = 10;         // 1초 타임아웃
        tty.c_cc[VMIN] = 0;           // 최소 읽기 바이트 없음

        cfsetispeed(&tty, baudrate);
        cfsetospeed(&tty, baudrate);

        if (tcsetattr(uart_fd, TCSANOW, &tty) != 0) {
            printf("Error %i from tcsetattr %s: %s\n", errno, serial_device, strerror(errno));
            close();
            return false;
        }
        return true;
    }

    // 읽기 스레드 시작
    bool startReadThread() {
        if (uart_fd < 0) {
            printf("Serial port %s not initialized\n", serial_device);
            return false;
        }

        running = true;
        if (pthread_create(&read_thread, NULL, readThreadWrapper, this) != 0) {
            printf("Failed to create read thread for %s\n", serial_device);
            running = false;
            return false;
        }
        return true;
    }

    // 모터 명령 파싱 (Python에서 보내는 #Sxxxx* 형식 감지)
    bool parseMotorCommand(const unsigned char* data, int data_length) {
        if (data_length < 7) return false;

        // #S로 시작하고 *로 끝나는지 확인
        if (data[0] == '#' && data[1] == 'S' && data[6] == '*') {
            // CRC는 여기서 확인하지 않음 (Python 코드에 CRC 없음)
            return true;
        }
        return false;
    }

    // 데이터 쓰기
    int write(const unsigned char* data, int length) {
        if (uart_fd < 0) return -1;
        return ::write(uart_fd, data, length);
    }

    // 포트 닫기 및 스레드 정리
    void close() {
        if (running) {
            running = false;
            pthread_join(read_thread, NULL);
        }
        if (uart_fd >= 0) {
            ::close(uart_fd);
            uart_fd = -1;
        }
    }

    // 현재 읽기 버퍼 얻기
    const unsigned char* getReadBuffer() const {
        return read_buf;
    }
};

// 메인 함수
int main() {
    // 두 개의 UART 인스턴스 생성
    UART uart1("/dev/ttyS0", B9600);  // Python에서 사용하는 첫 번째 포트
    UART uart2("/dev/ttyUSB0", B9600); // Python에서 사용하는 두 번째 포트

    // 시리얼 포트 초기화
    if (!uart1.init()) {
        printf("Failed to initialize UART for /dev/ttyS0\n");
        return -1;
    }
    if (!uart2.init()) {
        printf("Failed to initialize UART for /dev/ttyUSB0\n");
        return -1;
    }

    // 읽기 스레드 시작
    if (!uart1.startReadThread()) {
        printf("Failed to start read thread for /dev/ttyS0\n");
        return -1;
    }
    if (!uart2.startReadThread()) {
        printf("Failed to start read thread for /dev/ttyUSB0\n");
        return -1;
    }

    printf("UART initialized and read threads started for /dev/ttyS0 and /dev/ttyUSB0.\n");

    // 메인 루프
    while (1) {
        usleep(100000); // 100ms 대기 (CPU 사용률 감소)
    }

    // 정리 (실제로는 Ctrl+C로 종료)
    uart1.close();
    uart2.close();
    retu
-----------------------------
# send_data.py
import serial
import time

# 포트 설정
port1 = "/dev/ttyS0"
port2 = "/dev/ttyUSB0"
baud_rate = 9600

# 첫 번째 포트로 데이터 전송
ser1 = serial.Serial(port1, baud_rate, timeout=1)
data_to_send1 = "#S4321*"
ser1.write(data_to_send1.encode())
print(f"Sent to {port1}: {data_to_send1}")
ser1.close()

# 약간의 지연
time.sleep(1)

# 두 번째 포트로 데이터 전송
ser2 = serial.Serial(port2, baud_rate, timeout=1)
data_to_send2 = "#S9876*"  # 다른 값
ser2.write(data_to_send2.encode())
print(f"Sent to {port2}: {data_to_send2}")
ser2.close()
